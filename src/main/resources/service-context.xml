<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.0.3.xsd
    http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-autowire="byName" default-lazy-init="true">

	<description>Spring-database配置</description>

	<context:component-scan base-package="com.rongzhong">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>			
				<value>classpath*:component.properties</value>
			</list>
		</property>
	</bean>

    <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
    </bean>  
    


	<bean id="myBatisDao" class="com.rongzhong.component.ibatis.BaseDao" />

	<bean id="dataSource" class="com.rongzhong.component.datasource.factory.SuperDataSource" />
	<!-- mybatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis-config.xml" />
	</bean>
	
	<!-- 登录ip记录 -->
	<bean id="mongoLogin" class="com.rongzhong.component.mongodb.service.MongoLogin" />

	<bean id="redisService" class="com.rongzhong.component.redis.service.RedisService" />

	<bean id="initpara" class="com.rongzhong.home.servlet.Initialization" />

	<bean id="mongoPictureAndThumbnail"
		class="com.rongzhong.component.mongodb.service.MongoPictureAndThumbnail" />

	<bean id="mongoDocument" class="com.rongzhong.component.mongodb.service.MongoDocument" />

	<bean id="mongoPicture" class="com.rongzhong.component.mongodb.service.MongoPicture" />

	<!--图形验证码 -->
	<bean id="captchaService"
		class="com.octo.captcha.service.multitype.GenericManageableCaptchaService">
		<constructor-arg index="0" ref="imageEngine" />
		<!--超时时间 秒 -->
		<constructor-arg type="int" index="1" value="180" />
		<!--最大并发数 -->
		<constructor-arg type="int" index="2" value="10000" />
		<constructor-arg type="int" index="3" value="10000" />
	</bean>
	<bean id="imageEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
		<constructor-arg index="0">
			<list>
				<ref bean="captchaFactory" />
			</list>
		</constructor-arg>
	</bean>
	<bean id="captchaFactory" class="com.octo.captcha.image.gimpy.GimpyFactory">
		<constructor-arg>
			<ref bean="wordgen" />
		</constructor-arg>
		<constructor-arg>
			<ref bean="wordtoimage" />
		</constructor-arg>
	</bean>

	<bean id="wordgen"
		class="com.octo.captcha.component.word.wordgenerator.RandomWordGenerator">
		<!--可选字符 -->
		<constructor-arg>
			<value>abcdefghijklmnopqrstuvwxyz23456789</value>
		</constructor-arg>
	</bean>

	<bean id="wordtoimage"
		class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
		<description>图片生成器</description>
		<constructor-arg index="0">
			<ref bean="fontGenRandom" />
		</constructor-arg>
		<constructor-arg index="1">
			<ref bean="backGenUni" />
		</constructor-arg>
		<constructor-arg index="2">
			<ref bean="decoratedPaster" />
		</constructor-arg>
	</bean>

	<bean id="fontGenRandom"
		class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
		<description>文字转换图片</description>
		<constructor-arg index="0">
			<value>26</value><!--字体最小尺寸 -->
		</constructor-arg>
		<constructor-arg index="1">
			<value>34</value><!--字体最大尺寸 -->
		</constructor-arg>
		<constructor-arg index="2">
			<list>
				<bean class="java.awt.Font">
					<constructor-arg index="0">
						<value>Arial</value>
					</constructor-arg>
					<constructor-arg index="1">
						<value>0</value>
					</constructor-arg>
					<constructor-arg index="2">
						<value>32</value>
					</constructor-arg>
				</bean>
			</list>
		</constructor-arg>
	</bean>
	<bean id="backGenUni"
		class="com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator">
		<!--背景宽度 -->
		<constructor-arg index="0">
			<value>110</value>
		</constructor-arg>
		<!--背景高度 -->
		<constructor-arg index="1">
			<value>50</value>
		</constructor-arg>
	</bean>

	<bean id="decoratedPaster"
		class="com.octo.captcha.component.image.textpaster.DecoratedRandomTextPaster">
		<!--最大字符长度 -->
		<constructor-arg type="java.lang.Integer" index="0">
			<value>4</value>
		</constructor-arg>
		<!--最小字符长度 -->
		<constructor-arg type="java.lang.Integer" index="1">
			<value>4</value>
		</constructor-arg>
		<!--文本颜色 -->
		<constructor-arg index="2">
			<ref bean="colorGen" />
		</constructor-arg>
		<!--文本混淆 -->
		<constructor-arg index="3">
			<list>
				<!--<ref bean="baffleDecorator"/> -->
			</list>
		</constructor-arg>
	</bean>
	<bean id="baffleDecorator"
		class="com.octo.captcha.component.image.textpaster.textdecorator.BaffleTextDecorator">
		<constructor-arg type="java.lang.Integer" index="0">
			<value>1</value>
		</constructor-arg>
		<constructor-arg type="java.awt.Color" index="1">
			<ref bean="colorGrey" />
		</constructor-arg>
	</bean>
	<bean id="colorGen"
		class="com.octo.captcha.component.image.color.SingleColorGenerator">
		<constructor-arg type="java.awt.Color" index="0">
			<ref bean="colorGreen" />
		</constructor-arg>
	</bean>
	<bean id="colorGrey" class="java.awt.Color">
		<constructor-arg type="int" index="0">
			<value>200</value>
		</constructor-arg>
		<constructor-arg type="int" index="1">
			<value>255</value>
		</constructor-arg>
		<constructor-arg type="int" index="2">
			<value>200</value>
		</constructor-arg>
	</bean>
	<bean id="colorGreen" class="java.awt.Color">
		<constructor-arg type="int" index="0">
			<value>110</value>
		</constructor-arg>
		<constructor-arg type="int" index="1">
			<value>120</value>
		</constructor-arg>
		<constructor-arg type="int" index="2">
			<value>200</value>
		</constructor-arg>
	</bean>


	<!-- 邮件 begin -->
	<bean id="connectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
		destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="${jms.brokerurl}" />
				<property name="userName" value="${jms.username}" />
				<property name="password" value="${jms.password}" />
			</bean>
		</property>
	</bean>
	<bean id="mail_dest" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="email.queue" />
	</bean>
	<bean id="emailSenderJms" class="com.rongzhong.component.message.mail.EmailSenderJms">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="mail_dest" />
	</bean>
	<bean id="mailService"
		class="com.rongzhong.component.message.mail.service.MailService">
		<property name="myBatisDao" ref="myBatisDao" />
		<property name="emailSender" ref="emailSenderJms" />
	</bean>
	<!-- 邮件 end -->
	<!-- 短信 -->
	<bean id="sms_dest" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="sms.queue" />
	</bean>
	<bean id="smsSenderJms" class="com.rongzhong.component.message.sms.SmsSenderJms">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="sms_dest" />
	</bean>
	<bean id="smsService" class="com.rongzhong.component.message.sms.service.SmsService">
		<property name="myBatisDao" ref="myBatisDao" />
		<property name="smsSender" ref="smsSenderJms" />
	</bean>
	
	<bean id="smsSender" class="com.rongzhong.component.message.sms.SmsSender">
		<property name="listeners">
			<list>
				<ref local="rzwSmsSenderListener" />
			</list>
		</property>
	</bean>
 	<bean id="rzwSmsSenderListener"
		class="com.rongzhong.component.message.sms.listener.RZWSmsSenderListener">
		<property name="smsService" ref="smsService" />
	</bean>
	
	<!-- thumbnail  -->
	<bean id="image_dest" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg value="image.queue" />
	</bean>
	<bean id="thumbnail" class="com.rongzhong.component.thumbnail.JmsThumbnail">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="image_dest" />
	</bean>
</beans>